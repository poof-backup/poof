.\" Automatically generated by Pandoc 2.16.1
.\"
.TH "poof" "1" "" "Version 1.2.6" "Secure cloud storage backup documentation"
.hy
.SH Name
.PP
\f[B]poof\f[R] - 2-way secure data sync/backup/restore against cloud
storage.
.SH Synopsis
.PP
\f[B]poof\f[R] \f[I]command\f[R]
.PD 0
.P
.PD
\f[B]poof\f[R] [\f[B]\[en]confdir\f[R] TEXT] \f[I]command\f[R]
.PD 0
.P
.PD
\f[B]poof\f[R] [\f[B]\[en]poofconf\f[R] TEXT] \f[I]command\f[R]
.PD 0
.P
.PD
\f[B]poof\f[R] [\f[B]\[en]rcloneconf\f[R] TEXT] \f[I]command\f[R]
.PD 0
.P
.PD
\f[B]poof\f[R] [\f[B]\[en]help\f[R]]
.SH Description
.PP
Backup of local file system directories to cloud storage or other
storage, in a secure manner, and preserving the original files\[cq]
attributes for later recovery.
The poof!
tool offers additional security options:
.IP \[bu] 2
Secure delete the local file system files upon successful process
completion
.IP \[bu] 2
Encrypt the remote copies
.IP \[bu] 2
Eliminates all traces of itself in the local file system
.PP
poof!
leverages tried-and-true tools to perform its tasks:
.IP \[bu] 2
\f[C]rclone\f[R] (https://rclone.org/) - A command line program for
managing files in cloud storage.
.PP
\f[I]Experimental versions of \f[CI]poof\f[I] leverage other operating
system and third-party tools, discussed in this documentation.
For details, see the \f[CI]poof\f[I] GitHub
repository (https://github.com/poof-backup/poof).\f[R]
.SS Options
.TP
\[en]help
Prints brief usage information
.TP
\[en]confdir
Specifies the configuration files directory
.TP
\[en]poofconf
Specifies the poof configuration file name
.TP
\[en]rcloneconf
Specifies the rclone configuration file name
.PP
Canonical file name merges \f[I]confdir\f[R]/\f[I]poofconf\f[R] or
\f[I]confdir\f[R]/\f[I]rcloneconf\f[R].
.PP
Options are never used in production mode.
They were defined for initial rollout, testing, etc.
but the correct way of running poof!
is by letting it determine the optimal config file system locations on
its own.
.SS Commands
.TP
\f[B]backup\f[R]
Backup to remote without wiping out the local data.
.TP
\f[B]cconfig\f[R]
Ensure that the rclone-poof.conf file exists; creates it if not present.
.TP
\f[B]config\f[R]
Ensure that the poof.conf file exists; creates it if not present.
.TP
\f[B]cryptoggle\f[R]
Toggle remote target encryption ON/OFF.
.TP
\f[B]download\f[R]
Download the files from the cloud storage into their corresponding
directories.
.TP
\f[B]econfig\f[R]
Generate the encrypted rclone configuration scaffold.
.TP
\f[B]neuter\f[R]
Neuter this poof installation by deleting its configuration and
executables.
.TP
\f[B]paths\f[R]
Output the platform-specific paths to the poof configuration files.
.TP
\f[B]upload\f[R]
Upload to remote and wipe out the local data.
.TP
\f[B]verify\f[R]
Verify the poof and rclone tool configurations.
.TP
\f[B]version\f[R]
Print the software version and quit.
.PP
The \f[B]config\f[R] and \f[B]cconfig\f[R] commands also output their
associated configuration file to the console, and make a copy to the
clipboard.
.SS Supported Storage
.TP
\f[B]S3\f[R]
AWS Simple Storage Service
.PP
The development team is evaluating other storage systems and plan to
extend support in poof!
backup 2.0, expected to be released in mid 2022.Q1.
.SH Files
.TP
\f[I]poof.conf\f[R]
Cloud storage remote specification, paths to backup/upload, bucket and
file system information.
.TP
\f[I]rclone-poof.conf\f[R]
rclone cloud storage specification for clear and encrypted backups
configuration and secrets.
.PP
These files location is system-dependent.
.PP
On macOS: $HOME/Library/Application Support/poof
.PP
On Linux: $HOME/.config/poof
.SH One-time setup
.PP
Use \f[C]pip\f[R] or \f[C]pip3\f[R] to install in the current Python
scope (system or virtual environment):
.IP
.nf
\f[C]
pip3 install poof
\f[R]
.fi
.SS Installing \f[C]rclone\f[R]
.PP
Install \f[C]rclone\f[R] in your system via https://rclone.org/install/
.PP
\f[C]rclone\f[R] makes an identical copy of directories and their
contents to the desired cloud storage, including the correct time stamps
and permissions.
It\[cq]s a more reliable mechanism than building that logic in
\f[C]poof\f[R].
.SS Configuration
.PP
The \f[C]poof\f[R] configuration for \f[C]rclone\f[R] is specific to
this tool.
\f[C]rclone\f[R] users may have other configurations that in no way
conflict with \f[C]poof\f[R] and vice versa.
.PP
For the first time \f[C]poof\f[R] configuration, run:
.IP
.nf
\f[C]
poof verify
\f[R]
.fi
.PP
\f[C]poof\f[R] validates that all component and configuration
requirements are satisfied:
.IP
.nf
\f[C]
installed rclone? - PoofStatus.OK
exists poof.conf? - PoofStatus.MISSING_CONFIG_FILE
\f[R]
.fi
.PP
Generate a new, basic \f[C]poof\f[R] configuration file and validate its
contents:
.IP
.nf
\f[C]
poof config  && poof verify
\f[R]
.fi
.PP
Results in:
.IP
.nf
\f[C]
installed rclone? - PoofStatus.OK
exists poof.conf? - PoofStatus.OK
exists rclone-poof.conf? - PoofStatus.MISSING_CONFIG_FILE
\f[R]
.fi
.PP
The \f[C]rclone\f[R] configuration file for \f[C]poof\f[R] is still
missing.
Generate a simple cloud storage \f[C]rclone\f[R] configuration file:
.IP
.nf
\f[C]
poof cconfig && poof verify
\f[R]
.fi
.PP
The verification fails because \f[C]poof\f[R] must have at least one
directory to backup in addition to the backup of its own configuration,
which defaults to \f[C]unittest\f[R] until overridden by the user.
.PP
Verification fails because \f[C]poof\f[R] must have a minimum of two
directories to backup or upload to the cloud storage:
.IP \[bu] 2
A \f[C]poof\f[R] configuration backup directory
.IP \[bu] 2
One end-user backup directory
.PP
In most cases, \f[C]Documents\f[R] ought to be the first end-user
directory.
.PP
List the configuration paths to make the necessary updates:
.IP
.nf
\f[C]
poof paths
\f[R]
.fi
.PP
Shows these paths on a Mac:
.IP
.nf
\f[C]
poof.conf = /Users/joe-user/Library/Application Support/poof/poof.conf
rclone-poof.conf = /Users/joe-user/Library/Application Support/poof/rclone-poof.conf
\f[R]
.fi
.PP
It shows these paths on Linux:
.IP
.nf
\f[C]
poof.conf = /home/joe-user/.config/poof/poof.conf
rclone-poof.conf = /home/joe-user/.config/poof/rclone-poof.conf
\f[R]
.fi
.PP
Enter the full path(s) to each directory you wish to back up, no
\f[C]\[ti]\f[R] or \f[C]$HOME\f[R].
In \f[C]poof.conf\f[R]:
.IP
.nf
\f[C]
{
  \[dq]bucket\[dq]: \[dq]poofbackup-joe-user-206ce7879351\[dq],
  \[dq]confFile\[dq]: \[dq]/Users/joe-user/Library/Application Support/poof/poof.conf\[dq],
  \[dq]paths\[dq]: {
    \[dq]/Users/joe-user/Documents\[dq]: \[dq]Documents\[dq],
    \[dq]/Users/joe-user/Downloads\[dq]: \[dq]Downloads\[dq],
    \[dq]/Users/joe-user/Library/Application Support/poof\[dq]: \[dq]poof-config\[dq]
  },
  \[dq]remote\[dq]: \[dq]poof-backup\[dq]
}
\f[R]
.fi
.PP
Last, configure the appropriate credentials in \f[C]rclone.conf\f[R] for
the cloud storage intended for backup.
This example uses an Amazon S3 configuration, replace the bogus
credentials with your own.
.PP
Verify the configuation one last time:
.IP
.nf
\f[C]
poof verify
\f[R]
.fi
.PP
Will show that \f[C]poof\f[R] is ready for normal operations:
.IP
.nf
\f[C]
installed rclone? - PoofStatus.OK
exists poof.conf? - PoofStatus.OK
exists rclone-poof.conf? - PoofStatus.OK
configuration appears to be valid and has valid credentials
\f[R]
.fi
.SH IMPORTANT
.PP
\f[C]poof\f[R] creates or updates snapshots of the latest file system
contents in the local file system or the cloud storage.
.PP
\f[B]Restoring data from the cloud storage is a destructive operation in
the target file system.\f[R] This is by design because \f[C]poof\f[R]
clones and synchronizes the source file system to the targets.
Backups are never incremental \[en] they are always
\f[B]\f[BI]snapshots\f[B]\f[R].
.SH Regular backups
.PP
\f[C]poof\f[R] validates its own configuration before backing
up/uploading or restoring data.
It will fail if its own configuration or any of its required tools
configurations are invalid.
.PP
Run \f[C]poof backup\f[R] as often as needed or required to copy all the
directories in the \f[C]poof\f[R] configuration to the cloud storage.
It may automated via \f[C]cron\f[R] or \f[C]launchd\f[R].
.SH Upload
.PP
Run \f[C]poof upload\f[R] when there is need to sync the local file
system directories, then removes all the local files and directories
(local directories wipe).
.SH Restore
.PP
To restore a backup from the cloud to the local file system:
.IP "1." 3
Validate the configuration
.IP "2." 3
Run \f[C]poof download\f[R]
.PP
The file system synchronization process may take from a few minutes to
several hours, depending on the number of files involved, the lengt of
the files, and the connection speed.
.SH Encrypted backups/uploads
.PP
\f[C]poof\f[R] leverages \f[C]rclone\f[R] encrypted remotes, if they are
defined and available, beginning with version \f[B]1.2.0\f[R].
Future releases will implement \f[I]crypt\f[R] configuration generators
from within \f[C]poof\f[R], for now this relies on \f[C]rclone\f[R]
until automation, key storage, and operational security issues are
resolved.
.PP
Encryption details:
.IP "1." 3
File content encryption uses NaCl
SecretBox (https://pkg.go.dev/golang.org/x/crypto/nacl/secretbox)
.IP "2." 3
File and directory names are separated by `/', padded to a multiple of
16 bytes, then encrypted with EME and AES with a 256-bit key.
.PP
Implications:
.IP \[bu] 2
File and directory names with the same exact name will encrypt the same
way
.IP \[bu] 2
File and directory names which start the same won\[cq]t have a common
prefix
.IP \[bu] 2
All names are encrypted to lower case alphanumeric strings
.IP \[bu] 2
Padding characters (e.g.\ =) are stripped
.IP \[bu] 2
Supports case-insensitve remotes (e.g.\ Windows)
.PP
The \f[C]rclone\f[R] Crypt documentation provides a thorough discussion
of how the \f[C]crypt\f[R] remote implementation
works (https://rclone.org/crypt).
.SS Pre-requisites
.IP "1." 3
Working \f[C]poof\f[R] configuration
.IP "2." 3
Working \f[C]rclone\f[R] configuration for poof with a working type
\f[I]crypt\f[R] remote
.PP
Sample \f[C]poof.conf\f[R]:
.IP
.nf
\f[C]
{
  \[dq]bucket\[dq]: \[dq]poofbackup-joe-user-206ce7879351\[dq],
  \[dq]confFile\[dq]: \[dq]/Users/joe-user/Library/Application Support/poof/poof.conf\[dq],
  \[dq]paths\[dq]: {
    \[dq]/Users/joe-user/CryptoWallet\[dq]: \[dq]CryptoWallet\[dq],
    \[dq]/Users/joe-user/Documents\[dq]: \[dq]Documents\[dq],
    \[dq]/Users/joe-user/Downloads\[dq]: \[dq]Downloads\[dq],
    \[dq]/Users/joe-user/Library/Application Support/poof\[dq]: \[dq]poof-conf\[dq]
  },
  \[dq]remote\[dq]: \[dq]poof-backup\[dq]
}
\f[R]
.fi
.PP
Sample valid \f[C]rclone-poof.conf\f[R].
The \f[C][poof-crypt[\f[R] section was generated using \f[C]rclone\f[R]
configuration for the password.
Notice that the remote definition uses the target bucket in
\f[C]poof.conf\f[R]:
.IP
.nf
\f[C]
[poof-backup]
type = s3
provider = AWS
env_auth = false
access_key_id = BOGUS-KEY-USE-YOURS
secret_access_key = BOGUS-SECRET-KEY-USE-YOURS
region = eu-west-1
location_constraint = eu-west-1
acl = private
storage_class = STANDARD_IA
chunk_size = 8M
upload_concurrency = 2
server_side_encryption = AES256

[poof-crypt]
type = crypt
remote = poof:poofbackup-joe-user-206ce7879351
password = BOGUS-PASSWORD
password2 = BOGUS-PASSWORD2
\f[R]
.fi
.SS Enabling and disabling encryption
.PP
Enabling and disabling encryption is accomplished by editing the
\f[C]remote\f[R] attribute in the \f[C]poof\f[R] configuration file, to
point at the \f[C]poof-crypt\f[R] remote instead of the
\f[C]poof-backup\f[R] remote.
.IP
.nf
\f[C]
{
  \[dq]bucket\[dq]: \[dq]poofbackup-joe-user-206ce7879351\[dq],
  \[dq]confFile\[dq]: \[dq]/Users/joe-user/Library/Application Support/poof/poof.conf\[dq],
  \[dq]paths\[dq]: {
    \[dq]/Users/joe-user/CryptoWallet\[dq]: \[dq]CryptoWallet\[dq],
    \[dq]/Users/joe-user/Documents\[dq]: \[dq]Documents\[dq],
    \[dq]/Users/joe-user/Downloads\[dq]: \[dq]Downloads\[dq],
    \[dq]/Users/joe-user/Library/Application Support/poof\[dq]: \[dq]poof-conf\[dq]
  },
  \[dq]remote\[dq]: \[dq]poof-crypt\[dq]
}
\f[R]
.fi
.PP
Running the upload or backup commands copies the files and directories
to the cloud storage using encrypted directory and file names, and
encrypting the files to prevent unauthorized viewing by the cloud
storage provider:
.IP
.nf
\f[C]
poof backup
\f[R]
.fi
.PP
Disabling encryption only requires to point the remote back to the cloud
storage remote definition, instead of the encrypted remote.
.SS Effects on backup/upload and download
.PP
File and directory names are preserved, as in the cleartext backup, in
the local file system.
.PP
File and directory names are encrypted in the cloud storage target.
File names are transparent to \f[C]poof\f[R] and \f[C]rclone\f[R] -
listing the encypted cloud file system names with valid credentials
shows them in cleartext on the client, but they are obfuscated in the
remote as described at the beginning of this section.
.PP
\f[B]https://raw.githubusercontent.com/poof-backup/poof/master/assets/sample-S3-dir-list.png\f[R]
.SH Operational security
.PP
poof!
operates within a privacy continuum that ranges from simple data backup
and restore for safekeeping, to full target encryption and
self-destruction in case of risk of local system compromise.
.PP
.PP
The poof!
model covers 4 data security threat levels:
\f[B]https://raw.githubusercontent.com/poof-backup/poof/master/assets/backup-continuum.png\f[R]
.SS Level 1: backup and restore
.PP
As a user, I want to make periodic backups of one or more local file
system directories, and trust or otherwise have no privacy concerns
regarding the cloud storage provider.
.SS Level 2: upload and restore
.PP
As a user, I need to make a backup of my local directories but need to
wipe them out upon completion.
I trust or otherwise have no privacy concerns regarding the cloud
storage provider.
.PP
Examples:
.IP \[bu] 2
Bought a new computer and must move the data directories from the old to
the new system
.IP \[bu] 2
The current system must be surrendered to a distrusted third-party like
a repair shop
.SS Configuration info for threat levels 1 and 2
.PP
The \f[C]poof.conf\f[R] and \f[C]rclone-poof.conf\f[R] configuration
files are uploaded to the cloud if the poof!
configuration file is included as part of the configuration.
These files are stored in cleartext in the cloud storage, and can be
viewed or downloaded by anyone with access permissions.
.SS Level 3: crypt backup, restore
.PP
As a user, I want to make periodic backups of one or more local system
directories, and do not trust the cloud storage provider.
.PP
In this situation, the user may distrust the storage provider and wants
to prevent their data from being mined or otherwise accessed without
authorization.
.SS Level 4: crypt upload, restore
.PP
As a user, I need to make a backup of my local directories but need to
wipe them out upon completion.
I do not trust the cloud storage provider.
.IP \[bu] 2
Personal or business sensitive data is stored in one or more directories
managed by poof!
.IP \[bu] 2
Bought a new computer and must move the data directories from the old to
the new system
.IP \[bu] 2
The current system must be surrendered to a distrusted third-party like
a repair shop
.IP \[bu] 2
The cloud storage provider is known or suspected to inspect or mine
storage contents or to grant access to third-parties to do so
.SS Configuration info for threat levels 3 and 4
.PP
The poof!
configuration files are stored in cleartext in the local file system,
but are encrypted in the cloud storage if they are present in the
\f[C]poof.conf\f[R] configuration file.
.PP
In the case of a level 4 threat, \f[C]poof upload\f[R] will also wipe
out its own configuration, and remove itself and all its dependencies
from the local file system.
\f[C]rclone\f[R] is left alone because there may be other legitimate
uses for it other than \f[C]poof\f[R] integration.
.SS Preserving the poof! configuration for threat levels 3 and 4
.PP
The \f[C]config\f[R] and \f[C]cconfig\f[R] commands display the current
configuration and copy the configuration files to the clipboard.
The user may then store them in a separate, secure, unrelated system for
later restoring the files.
For example, this command:
.IP
.nf
\f[C]
poof config
\f[R]
.fi
.PP
Displays the configuration:
.IP
.nf
\f[C]
{
  \[dq]bucket\[dq]: \[dq]poofbackup-joe-user-206ce7879351\[dq],
  \[dq]confFile\[dq]: \[dq]/Users/joe-user/Library/Application Support/poof/poof.conf\[dq],
  \[dq]paths\[dq]: {
    \[dq]/Users/joe-user/CryptoWallet\[dq]: \[dq]CryptoWallet\[dq],
    \[dq]/Users/joe-user/Documents\[dq]: \[dq]Documents\[dq],
    \[dq]/Users/joe-user/Downloads\[dq]: \[dq]Downloads\[dq],
    \[dq]/Users/joe-user/Library/Application Support/poof\[dq]: \[dq]poof-conf\[dq]
  },
  \[dq]remote\[dq]: \[dq]poof-crypt\[dq]
}
\f[R]
.fi
.PP
The configuration file also available in the clipboard.
You may verify this by pasting into any text editor, or using your
GUI\[cq]s tools for viewing the clipboard.
.PP
.PP
Generate these files, store them in a safe place, separate from the
cloud storage holding your backups or the system that you backed up, and
use them to restore your data to a secure, safe system, when the threat
level drops.
.SH Bugs
.PP
See GitHub issues: https://github.com/poof-backup/poof/issues
.SH Author
.PP
Eugene \[lq]pr3d4t0r\[rq] Ciurana and the poof backup contributors
<poof.project AT cime.net>
.SH See also
.PP
\f[B]rclone(1)\f[R]
